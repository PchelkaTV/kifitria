import sqlite3
import time
import asyncio
from aiogram import Bot, Router, Dispatcher
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from collections import defaultdict
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7790837350:AAEZ8txZk-8osGKA3eI9CxWHY_sG5uKBONo"  # noqa

# ID –∫–∞–Ω–∞–ª–∞
ALLOWED_CHAT_ID = -1002634017713

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
TOTAL_CLICKS_NEEDED = 10000
CHALLENGE_DURATION = 24 * 60 * 60  # 24 —á–∞—Å–∞
UPDATE_INTERVAL = 5  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∏–∫–∏
CLICK_COOLDOWN = 0.5  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –∫–ª–∏–∫ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã

# –°—é–∂–µ—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å —à–∞–≥–æ–º 1000
PLOT_THRESHOLDS = {
    1000: " 1000! –¢–∞–±—É—Ä–µ—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç –Ω–µ—Ä–≤–Ω–∏—á–∞—Ç—å, –∞ –∫–æ—Ä–∞–±–ª—å –ø–æ–¥—ë—Ä–≥–∏–≤–∞–µ—Ç—Å—è! ü™ë",  # noqa
    3000: "üö® 3000! –ù–∞ –∫–æ—Ä–∞–±–ª–µ –ö–∏—Ñ–∏—Ä—É–Ω—Ü–µ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç —á—Ç–æ-—Ç–æ –¥—ã–º–∏—Ç—å",  # noqa
    5000: "üí• 5000! –ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞! –ù–∞ –∫–æ—Ä–∞–±–ª–µ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ! ü™ë",  # noqa
    7000: "üå™ 7000! –ù–∞ –∫–æ—Ä–∞–±–ª–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–∞–Ω–∏–∫–∞, —Ç–∞–±—É—Ä–µ—Ç—ã –ø—ã—Ç–∞—é—Ç—Å—è —á–∏–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã. ü™ë",  # noqa
    9000: "üéØ 9000! –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫! –¢–∞–±—É—Ä–µ—Ç—ã –Ω–µ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –ø–æ–ª–æ–º–∫–∞–º–∏ –∏ –≥–æ—Ç–æ–≤—è—Ç —ç–≤–∞–∫—É–∞—Ü–∏—é! ü™ë",
    9500: "üéØ 9500! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —ç–≤–∞–∫—É–∞—Ü–∏—è! –ö–æ—Ä–∞–±–ª—å –µ–ª–µ –¥–µ—Ä–∂–∏—Ç—å—Å—è –≤ –≤–æ–∑–¥—É—Ö–µü™ë",# noqa
    9900: "üéØ 9900! –ö–æ—Ä–∞–±–ª—å –ª–µ—Ç–∏—Ç –∫ –∑–µ–º–ª–µ, –∞ —Ç–∞–±—É—Ä–µ—Ç—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–ª –ø—ã—Ç–∞—é—Ç—Å—è —ç–≤–∞–∫—É–∏—Ä–æ–≤–∞—Ç—å—Å—è!ü™ë",
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=TOKEN)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("challenge.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
cursor.execute('''
    CREATE TABLE IF NOT EXISTS challenge (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        clicks INTEGER DEFAULT 0,
        start_time INTEGER,
        message_id INTEGER,
        chat_id INTEGER
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_clicks (
        user_id INTEGER,
        clicks INTEGER DEFAULT 0,
        username TEXT,
        PRIMARY KEY (user_id)
    )
''')
conn.commit()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
last_update_time: int = 0
challenge_active = False
challenge_start_time: int = 0
challenge_message_id = 0
challenge_chat_id = 0
plot_messages_sent = set()
last_message_text = ""
last_time_left = ""  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
last_click_time: int = 0  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞
user_last_click = defaultdict(float)  # –î–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
user_remaining_clicks = defaultdict(int)  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–ª–∏–∫–æ–≤

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–∑–∞
PRIZE_MESSAGE = "üèÜ–° –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—å—Å—è –≤ –õ–°! –ò–ª–∏ —è –∏–ª–∏ —Ç–∞–±—É—Ä–µ—Ç—ã!\n"  # noqa

def load_challenge_data():
    global challenge_start_time, challenge_message_id, challenge_chat_id, challenge_active
    cursor.execute("SELECT clicks, start_time, message_id, chat_id FROM challenge WHERE id = 1")
    result = cursor.fetchone()
    if result:
        clicks, start_time, message_id, chat_id = result
        challenge_start_time = int(start_time) if start_time else 0
        challenge_message_id = int(message_id) if message_id else 0
        challenge_chat_id = int(chat_id) if chat_id else ALLOWED_CHAT_ID
        challenge_active = challenge_start_time and (time.time() - challenge_start_time) < CHALLENGE_DURATION
        return clicks
    return 0

def save_challenge_data(clicks):
    cursor.execute('''
        INSERT OR REPLACE INTO challenge (id, clicks, start_time, message_id, chat_id)
        VALUES (1, ?, ?, ?, ?)
    ''', (clicks, challenge_start_time, challenge_message_id, challenge_chat_id))
    conn.commit()

def load_user_clicks():
    user_clicks = defaultdict(int)
    user_names = {}
    cursor.execute("SELECT user_id, clicks, username FROM user_clicks")
    for user_id, clicks, username in cursor.fetchall():
        user_clicks[user_id] = clicks
        user_names[user_id] = username if username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"  # noqa
    return user_clicks, user_names


def save_user_click(user_id, clicks, username):
    cursor.execute('''
        INSERT OR REPLACE INTO user_clicks (user_id, clicks, username)
        VALUES (?, ?, ?)
    ''', (user_id, clicks, username))
    conn.commit()

def get_time_left():
    if not challenge_start_time or challenge_start_time <= 0:
        return "0 —á–∞—Å–æ–≤ 0 –º–∏–Ω—É—Ç"  # noqa
    elapsed_time = time.time() - challenge_start_time
    remaining_time = max(0, CHALLENGE_DURATION - elapsed_time)
    if remaining_time <= 0:
        return "0 —á–∞—Å–æ–≤ 0 –º–∏–Ω—É—Ç"  # noqa
    hours = int(remaining_time // 3600)
    minutes = int((remaining_time % 3600) // 60)
    return f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"  # noqa

def get_leaderboard(user_clicks, user_names):
    if not user_clicks:
        return "–ù–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª! ü™ë"  # noqa
    sorted_users = sorted(user_clicks.items(), key=lambda x: x[1], reverse=True)[:3]
    return "\n".join(f"{i}. {user_names[user_id]}: {count} –∫–ª–∏–∫–æ–≤"  # noqa
                     for i, (user_id, count) in enumerate(sorted_users, 1))

def get_leader(user_clicks, user_names):
    if not user_clicks:
        return "–ù–∏–∫—Ç–æ", 0  # noqa
    leader_id, leader_clicks = max(user_clicks.items(), key=lambda x: x[1])
    return user_names[leader_id], leader_clicks

async def end_challenge(winner: str):
    global challenge_active
    challenge_active = False

    user_clicks, user_names = load_user_clicks()
    leader_name, leader_clicks = get_leader(user_clicks, user_names)

    message = (
        "üéâ –£–†–ê! –í—ã —Å–ø–∞—Å–ª–∏ –∫–∞–Ω–∞–ª –æ—Ç —Ç–∞–±—É—Ä–µ—Ç–æ–≤ —Å –ö–∏—Ñ–∏—Ä—É–Ω–∞! ü™ë\n"
        "–ò—Ö –∫–æ—Ä–∞–±–ª—å –ø–æ–≤–µ—Ä–∂–µ–Ω, –∞ –æ–Ω–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –Ω–∞ —Å–≤–æ—é –ø–ª–∞–Ω–µ—Ç—É –≤ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–ø—Å—É–ª–∞—Ö!\n"  # noqa
        f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {TOTAL_CLICKS_NEEDED} –∫–ª–∏–∫–æ–≤! üöÄ\n"
        "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–¢–æ–ø-3):\n" + get_leaderboard(user_clicks, user_names) +
        f"\n–ë–æ–ª—å—à–µ –≤—Å–µ—Ö –∫–ª–∏–∫–æ–≤ ({leader_clicks}) —Å–¥–µ–ª–∞–ª {leader_name}!\n"  # noqa
        f"{PRIZE_MESSAGE}\n"
        "–° 1 –∞–ø—Ä–µ–ª—è, –¥—Ä—É–∑—å—è! üòÑ"  # noqa
    ) if winner == "users" else (
        "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! üò±\n"
        "–í—ã –Ω–µ —É—Å–ø–µ–ª–∏... –ö–∞–Ω–∞–ª –∑–∞—Ö–≤–∞—á–µ–Ω –∏ –±—É–¥—É—Ç –≤–µ—Å—Ç–∏ —Ç–∞–±—É—Ä–µ—Ç—ã —Å –ö–∏—Ñ–∏—Ä—É–Ω–∞! ü™ë\n"
        "–ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –ø–æ–∫–∞ –º–µ–Ω—è —É—Ç–∞—â–∏–ª–∏ –Ω–∞ –∏—Ö –ø–ª–∞–Ω–µ—Ç—É –∏ —Å—Ç–∞–≤—è—Ç –æ–ø—ã—Ç—ã.\n"  # noqa
        "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–¢–æ–ø-3):\n" + get_leaderboard(user_clicks, user_names) +
        f"\n–ë–æ–ª—å—à–µ –≤—Å–µ—Ö –∫–ª–∏–∫–æ–≤ ({leader_clicks}) —Å–¥–µ–ª–∞–ª {leader_name}!\n"  # noqa
        f"{PRIZE_MESSAGE}\n"
        "–° 1 –∞–ø—Ä–µ–ª—è, –¥—Ä—É–∑—å—è! üòÑ"  # noqa
    )

    await bot.edit_message_text(
        chat_id=challenge_chat_id,
        message_id=challenge_message_id,
        text=message
    )

async def notify_time_left():
    while challenge_active:
        elapsed_time = time.time() - challenge_start_time
        remaining_time = CHALLENGE_DURATION - elapsed_time

        if not challenge_active:
            break

        if 3595 <= remaining_time <= 3605:
            await bot.send_message(chat_id=challenge_chat_id, text="‚è∞ –û—Å—Ç–∞–ª—Å—è 1 —á–∞—Å! –ö–ª–∏–∫–∞–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ! ü™ë")  # noqa
        elif 1795 <= remaining_time <= 1805:
            await bot.send_message(chat_id=challenge_chat_id, text="‚è∞ –û—Å—Ç–∞–ª–æ—Å—å 30 –º–∏–Ω—É—Ç! –°–ø–∞—Å–∏—Ç–µ –∫–∞–Ω–∞–ª! ü™ë")  # noqa
        elif 295 <= remaining_time <= 305:
            await bot.send_message(chat_id=challenge_chat_id, text="‚è∞ 5 –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞! –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å! ü™ë")  # noqa

        if remaining_time <= 0:
            await end_challenge("taburets")
            break

        await asyncio.sleep(60)

async def update_message():
    global last_update_time, last_message_text, last_time_left, last_click_time
    while challenge_active:
        current_time = int(time.time())
        time_left = get_time_left()
        clicks = load_challenge_data()


        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        should_update = False
        if current_time - last_click_time < UPDATE_INTERVAL:
            # –ï—Å–ª–∏ –±—ã–ª–∏ –∫–ª–∏–∫–∏ –Ω–µ–¥–∞–≤–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
            if current_time - last_update_time >= UPDATE_INTERVAL:
                should_update = True
        else:
            # –ï—Å–ª–∏ –∫–ª–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            if time_left != last_time_left:
                should_update = True

        if should_update:
            message_text = (
                "üö® –í–ù–ò–ú–ê–ù–ò–ï! 1 –∞–ø—Ä–µ–ª—è —Ç–∞–±—É—Ä–µ—Ç—ã —Å –ö–∏—Ñ–∏—Ä—É–Ω–∞ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –∫–∞–Ω–∞–ª! ü™ë\n"  # noqa
                "–ù—É–∂–Ω–æ 10,000 –∫–ª–∏–∫–æ–≤, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –µ–≥–æ! üÜò\n"
                "–ù–µ —É—Å–ø–µ–µ—Ç–µ ‚Äî —Ç–∞–±—É—Ä–µ—Ç—ã –∑–∞—Ö–≤–∞—Ç—è—Ç –∫–∞–Ω–∞–ª, –∞ –º–µ–Ω—è —É—Ç–∞—â–∞—Ç –Ω–∞ –ö–∏—Ñ–∏—Ä—É–Ω —Å—Ç–∞–≤–∏—Ç—å –æ–ø—ã—Ç—ã! üò±\n"  # noqa
                "–ö–ª–∏–∫–∞–π—Ç–µ! üëÄ‚è∞\n\n"
                f"–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞: {time_left}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–∫–æ–≤: {TOTAL_CLICKS_NEEDED - clicks}"
            )

            if message_text != last_message_text:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –∫–∞–Ω–∞–ª! ü™ë", callback_data='save_channel')]  # noqa
                ])
                try:
                    await bot.edit_message_text(
                        chat_id=challenge_chat_id,
                        message_id=challenge_message_id,
                        text=message_text,
                        reply_markup=keyboard
                    )
                    last_message_text = message_text
                    last_update_time = current_time
                    last_time_left = time_left
                except TelegramRetryAfter as e:
                    await asyncio.sleep(e.retry_after)
                    await bot.edit_message_text(
                        chat_id=challenge_chat_id,
                        message_id=challenge_message_id,
                        text=message_text,
                        reply_markup=keyboard
                    )
                    last_message_text = message_text
                    last_update_time = current_time
                    last_time_left = time_left
                except TelegramBadRequest as e:
                    if "message is not modified" in str(e):
                        last_message_text = message_text
                        last_update_time = current_time
                        last_time_left = time_left

        await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

@router.message(Command("start_challenge"))
async def start_challenge(message: Message):
    global challenge_start_time, challenge_message_id, challenge_chat_id, challenge_active, last_update_time, plot_messages_sent, last_message_text, last_time_left, last_click_time

    if message.chat.type != "private":
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°! ü™ë")  # noqa
        return

    admins = await bot.get_chat_administrators(ALLOWED_CHAT_ID)
    if message.from_user.id not in [admin.user.id for admin in admins]:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–∞! ü™ë")  # noqa
        return

    if challenge_active:
        await message.reply("–ß–µ–ª–ª–µ–Ω–¥–∂ —É–∂–µ –∏–¥—ë—Ç! –ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –∫–∞–Ω–∞–ª–µ! ü™ë")  # noqa
        return

    challenge_start_time = int(time.time())
    challenge_chat_id = ALLOWED_CHAT_ID
    challenge_active = True
    last_update_time = 0
    last_click_time = 0
    plot_messages_sent.clear()
    last_message_text = ""
    last_time_left = ""
    user_last_click.clear()
    user_remaining_clicks.clear()

    cursor.execute("DELETE FROM challenge")
    cursor.execute("DELETE FROM user_clicks")
    conn.commit()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –∫–∞–Ω–∞–ª! ü™ë", callback_data='save_channel')]  # noqa
    ])


    time_left = get_time_left()
    message_text = (
        "üö® –í–ù–ò–ú–ê–ù–ò–ï! 1 –∞–ø—Ä–µ–ª—è —Ç–∞–±—É—Ä–µ—Ç—ã —Å –ö–∏—Ñ–∏—Ä—É–Ω–∞ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –∫–∞–Ω–∞–ª! ü™ë\n"  # noqa
        "–ù—É–∂–Ω–æ 10,000 –∫–ª–∏–∫–æ–≤, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –µ–≥–æ! üÜò\n"
        "–ù–µ —É—Å–ø–µ–µ—Ç–µ ‚Äî —Ç–∞–±—É—Ä–µ—Ç—ã –∑–∞—Ö–≤–∞—Ç—è—Ç –∫–∞–Ω–∞–ª, –∞ –º–µ–Ω—è —É—Ç–∞—â–∞—Ç –Ω–∞ –ö–∏—Ñ–∏—Ä—É–Ω —Å—Ç–∞–≤–∏—Ç—å –æ–ø—ã—Ç—ã! üò±\n"  # noqa
        "–ö–ª–∏–∫–∞–π—Ç–µ! üëÄ‚è∞\n\n"
        f"–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞: {time_left}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–∫–æ–≤: {TOTAL_CLICKS_NEEDED}"
    )

    msg = await bot.send_message(
        chat_id=challenge_chat_id,
        text=message_text,
        reply_markup=keyboard
    )
    challenge_message_id = msg.message_id
    last_message_text = message_text
    last_time_left = time_left

    save_challenge_data(0)
    asyncio.create_task(notify_time_left())
    asyncio.create_task(update_message())
    await message.reply("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞–ª—Å—è! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª. ü™ë")  # noqa

@router.message(Command("force_good_end"))
async def force_good_end(message: Message):
    if message.chat.type != "private":
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°! ü™ë")  # noqa
        return

    admins = await bot.get_chat_administrators(ALLOWED_CHAT_ID)
    if message.from_user.id not in [admin.user.id for admin in admins]:
        await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–∞! ü™ë")  # noqa
        return

    if not challenge_active:
        await message.reply("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start_challenge ü™ë")  # noqa
        return

    await end_challenge("users")
    await message.reply("–ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–±–µ–¥–∏–ª–∏! üéâ")  # noqa

@router.message(Command("force_bad_end"))
async def force_bad_end(message: Message):
    if message.chat.type != "private":
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°! ü™ë")  # noqa
        return

    admins = await bot.get_chat_administrators(ALLOWED_CHAT_ID)
    if message.from_user.id not in [admin.user.id for admin in admins]:
        await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–∞! ü™ë")  # noqa
        return

    if not challenge_active:
        await message.reply("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start_challenge ü™ë")  # noqa
        return

    await end_challenge("taburets")
    await message.reply("–ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–≤–µ—Ä—à—ë–Ω! –¢–∞–±—É—Ä–µ—Ç—ã –ø–æ–±–µ–¥–∏–ª–∏! üò±")  # noqa

@router.callback_query(F.data == "save_channel")
async def button_click(callback: CallbackQuery):
    global challenge_active, last_click_time

    if not challenge_active:
        await callback.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!", show_alert=True)
        return

    user_id = callback.from_user.id
    current_time = time.time()

    # –ê–Ω—Ç–∏—Å–ø–∞–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞
    if current_time - user_last_click[user_id] < CLICK_COOLDOWN:
        await callback.answer("–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ü™ë", show_alert=False)
        return

    user_last_click[user_id] = current_time
    last_click_time = int(current_time)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
    actual_clicks = load_challenge_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    user_remaining_clicks[user_id] = TOTAL_CLICKS_NEEDED - actual_clicks

    user_name = callback.from_user.username or callback.from_user.first_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
    clicks = actual_clicks + 1
    user_clicks, user_names = load_user_clicks()
    user_clicks[user_id] += 1

    # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_remaining_clicks[user_id] -= 1
    if user_remaining_clicks[user_id] < 0:
        user_remaining_clicks[user_id] = 0

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—é–∂–µ—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    for threshold, plot_message in PLOT_THRESHOLDS.items():
        if clicks == threshold and threshold not in plot_messages_sent:
            await bot.send_message(chat_id=challenge_chat_id, text=plot_message)
            plot_messages_sent.add(threshold)

    save_user_click(user_id, user_clicks[user_id], user_name)
    save_challenge_data(clicks)

    if clicks >= TOTAL_CLICKS_NEEDED:
        await end_challenge("users")
        return


    await callback.answer(f"–ö–ª–∏–∫ –∑–∞—Å—á–∏—Ç–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–∫–æ–≤: {user_remaining_clicks[user_id]} ü™ë", show_alert=False)

async def main():
    global challenge_active
    # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    challenge_active = False

    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)
    conn.close()

if __name__ == '__main__':
    asyncio.run(main())
